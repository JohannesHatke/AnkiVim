String matching  	[latex]\begin{enumerate}    \item efficiently find all occurences of pattern $P$ of length $m$ in text$T$ of length $n$\\ \\Counting query: reports number of occurrences\\Reporting query: reports all occurrences (where)\\    \item solvable: suffix tree    \item advantage suffix tree:\begin{itemize}    \item if $T$ static, suffix tree constructed once in preprocessing andmatchings are then "fast"\end{itemize}\end{enumerate}[/latex]
Suffix tree: i-th prefix/suffix  	[latex]$T=t_1t_2 \dots t_n$\\ \\$t_1 \dots t_i$ is ith prefix of $T$\\ \\$t_i \dots t_n$ is ith suffix of $T$[/latex]
Suffix Tree  	[latex]Suffix tree for text $T$ with length $n$ is rooted directed tree with $n$leaves. All internal nodes (not root) have at least two children. All edges are labeled with non-empty substring of $T$ and all outgoing edges from node startwith different character. Each leaf in suffix tree is labeled with integer $i\in [1,n]$ s.t. concatenating edge labels on the path from root to this leafspells out suffix of $T$ that starts at position $i$. Suffix tree can beconstructed in $O(n)$ time and space.[/latex]
Searching in Suffix Tree  	[latex]Task: find pattern $P = p_1 \dots p_m$ of length $m$ in suffix tree for text$T$ of length $n$.\begin{enumerate}    \item set $cur\_node=root$ and $cur\_char=p_1$    \item find correct outgoing edge from $cur\_node$ which starts with$cur\_char$    \item match subsequent chars of pattern to edge label of step $2$character-by-character until whole pattern was matched (go to step $4$ a) orone ends up at node $v$. Assume we already matched $p_1 \dots p_i$: set$cur\_node = v$ and $cur\_char = p_{i+1}$    \item repeat steps $2, 3$ until:\\$a)$ whole pattern was matched\\$b)$ there is no outgoing edge starting with $cur\_char$ (step 2) or subsequentchars of $P$ cannot be matched (step 3) \end{enumerate}[/latex]
Searching in Suffix Tree  	 	[latex]Task: find pattern $P = p_1 \dots p_m$ of length $m$ in suffix tree for text$T$ of length $n$.\begin{enumerate}    \item set $cur\_node=root$ and $cur\_char=p_1$    \item find correct outgoing edge from $cur\_node$ which starts with$cur\_char$    \item match subsequent chars of pattern to edge label of step $2$character-by-character until whole pattern was matched (go to step $4$ a) orone ends up at node $v$. Assume we already matched $p_1 \dots p_i$: set$cur\_node = v$ and $cur\_char = p_{i+1}$    \item repeat steps $2, 3$ until:\\$a)$ whole pattern was matched\\$b)$ there is no outgoing edge starting with $cur\_char$ (step 2) or subsequentchars of $P$ cannot be matched (step 3) \end{enumerate}Evaluation:\\\begin{itemize}    \item step $4a)$: suppose search procedure ended at node $w$ or incomingedge of node $w$: occurrences of $P$ in $T$ can be found in subtree rooted at$w$    \item step $4b)$: $P$ does not occur in $T$\end{itemize}[/latex]
Searching in Suffix Tree: Counting query + Reporting query  	[latex]Counting query (report no. of occurrences of $P$ in $T$:\begin{itemize}    \item step $4a)$: occurrences found $=$ return number of leaves in subtreerooted at $w$ (if all nodes in subtree labeled with subtree sizes, this isconstant time)\item step $4b)$: no occurrences found $=$ return $0$\item runtime for counting query: $O(m) = $find final node in $m$ steps\end{itemize}Reporting query (report all occurrences of $P$ in $T$:\begin{itemize}    \item step $4a)$: occurrences found $=$ output labels of all leaves insubtree rooted at $w$ in $O(Occ_{T}^{P}))$ time wherre $Occ_{T}^{P}$ is no. ofoccurences of $P$ in $T$\item step $4b)$: no occurrences found $=$ return empty set\item runtime for reporting query: $O(m+Occ_{T}^{P})$\end{itemize}\begin{itemize}[/latex]
Suffix tree performance  	[latex]\begin{enumerate}    \item can be constructed in $O(n)$ time + space    \item counting query on tree: $O(m)$ time    \item reporting query on tree: $O(m+Occ_{T}^{P}$ time\end{enumerate}[/latex]
Suffix tree: Applications  	[latex]\begin{enumerate}    \item searching for exact patterns and their occurences\item find Maximal Unique Matches\item find all maximal pairs\end{enumerate}[/latex]
Maximal Unique Matches  	[latex]Given: two sequences $A, B$\begin{enumerate}    \item match: occurence of same substring in $A$ and $B$    \item match is left/right maxmal if match cannot be extended to left/right(chars to immediate left/right differ)    \item Maximal Unique Match is left + right maximal matc that occurs exactlyonce in $A$ and exactly once in $B$\end{enumerate}[/latex]
Motivation: Maximal Unique Matches  	[latex]\begin{enumerate}    \item global alignents of large sequences    \item unique $=$ no ambiguity    \item a long MUM is almost certainly part of global alignment of sequences$A$ and $B$\item to get full alignment we only need to align sequences in gap between MUMs\end{enumerate}[/latex]
Finding all Maximal Unique Matches of sequences A and B 	[latex]\begin{itemize}    \item build generalized suffix tree for string $A\#B\$$:\end{itemize}[/latex]TODO:INSERT IMAGE FROM SLIDE 14 SLIDESET 01 with text beside it[latex]\begin{enumerate}    \item mark each internal node $v$ of the tree with exactly two child nodeswhere one is leaf of $A$ and other is leaf of $B$    \item for each internal node $v$ unmark $sl(v)$ ($sl(v)$ of internal nodev=$\bar{cb}$ where $c$ is char and $b$ is string is node w =$\bar{b}$)    \item  report all marked nodes as Maximal Unique Matches\end{enumerate}[/latex]
Maximal pair: Definition  	[latex]Maximal pair in sequence $A$ is pair of occurences of substring $\alpha$ in $A$s.t. characters to immediate left/right of the two occurences differ (pair isleft + right maximal). Maximal pair is representeed by $(i, j, |\alpha|)$ where$i, j$ are starting positions of occurences of $\alpha$ and $i < j$.[/latex]
Finding all maximal pairs: runtime analysis  	[latex]\begin{enumerate}    \item creation of suffix tree + post-order traversal + list linking $=O(n)$ time\item each operation of cartesian product produces unique maximal pair $= O(k)$time where $k$ is no. of maximal pairs.\item in total algorithm takes $O(n+k)$ time\item in many applicaations we only care about maximal pairs of length $m$:\\runtime then reduced to $O(n+k_m)$ where $k_m$ is no. of maximal pairs withlength $\geq m$\end{enumerate}[/latex]
Finding all maximal pairs in sequence A  	TODO: INSERT IMAGES FROM SLIDE 18 + 19
