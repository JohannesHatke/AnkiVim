Oracle / Virtual Best Solver (VBS) - Intuition 	Given portfolio (set) of algorithms, oracle is best portfolio system that always selects the best component solver for a given instance.
Oracle / Virtual Best Solver (VBS) - Definition 	[latex]Given portfolio of algorithms $\mathcal{P}$, set of instances $\mathcal{I}$, a performance metric $m: \mathcal{P} \times \mathcal{I} \to \mathbb{R}$, the performance of the oracle is $\sum \limits_{\pi \in \mathcal{I}} \min\limits_{\mathcal{A} \in \mathcal{P}} m(\mathcal{A}, \pi)$[/latex]
Algorithm Portfolios: Baseline - Single Best -- Intuition  	If we don't use portfolio, we would simply pick best single algorithm
Algorithm Portfolio - Baseline: Single Best -- Definition  	Given portfolio of algorithms $\mathcal{P}$, set of instances $\mathcal{I}$, performance metric $m: \mathcal{P} \times \mathcal{I} \to \mathbb{R}$, singlebest algorithm is:\begin{equation*}arg\ \min \limits_{\mathcal{A} \in \mathcal{P}} \sum \limits_{\pi \in\mathcal{I}} m(\mathcal{A}, \pi)\end{equation*}
Parallel algorithm portfolios - Definition 	[latex]Given portfolio (set) of algorithms $\mathcal{P}$ of size $k$ and $k$ parallelcomputation units (CPU cores) a parallel portfolio system runs each$\mathcal{A} \in \mathcal{P}$ on one computation unit in parallel. The first$\mathcal{A}$ that solved the instance at hand, terminates all otheralgorithms.\\ \\Solving instances: \begin{itemize}\item findin solution (decision problems)\item reaching given solution quality (optimization problems)\item proving optimality (optimization problems)\end{itemize}[/latex]
Parallel algorithm portfolios - Performance  	[latex]For a given set of instances \mathcal{I} and a performance metric $m:\mathcal{P} \times \mathcal{I} \to \mathbb{R}$, performance of algorithmportfolio is:\begin{equation*}\sum \limits_{\pi \in \mathcal{I}} \min \limits_{\mathcal{A} \in \mathcal{P}}m(\mathcal{A}, \pi) + \epsilon_k\end{equation*}where $\epsilon_k$ is overhead induced by using $k$ parallel computation unitsin parallel.[/latex]
Sequential portfolios - Definition 	[latex]Given portfolio (set) of algorithms $\mathcal{P}$ of size $k$, sequentialportfolio system runs all $\mathcal{A} \in \mathcal{P}$ on the same computationunit in parallel (round robin). First $\mathcal{A}$ that solved instance athand terminates other algorithms.\\ \\$\Rightarrow$ each algorithm = only $\frac{1}{k}$ of overall available timebudget (cutoff) and memory.[/latex]
Algorithm Schedules Optimized for Runtime  	[latex]Motivation:\\ \\Given portfolio of algorithms $\mathcal{P}$, set of instances $\mathcal{I}$,runtime as performance metric, find\begin{itemize}\item time slice assignment $\sigma: \mathcal{P} \to [0, \kappa]$\item permutation $\rho : \{1, \dots, |\mathcal{P}|\} \to \mathcal{P}$\end{itemize}such that the number of timeouts and (average) runtime is minimized.\\ \\Properties:\\\begin{itemize}\item finding optimal time slice assignment and permutation = NP-hard\item in practice, optimizing both simultaneously = too hard\item Two step approach\begin{enumerate}\item find timeout-minimal time slice assignment $\sigma$\item given $\sigma$ find time-minimal permutation $\rho$\end{enumerate}\end{itemize}[/latex]
Time-out minimal Schedule - Definition 	[latex]Given portfolio of algorithms $\mathcal{P}$, set of instances $\mathcal{I}$,runtime as performance metric $t: \mathcal{P} \times \mathcal{I} \to\mathbb{R}$, runtime cutoff $\kappa$, the time-out minmal algorithm schedulingproblem is to find a schedule $\sigma: \mathcal{P} \to [0, \kappa]$ with:\begin{equation*}\sigma \in arg \max \limits_{\sigma:P \to [0,\kappa]} | \{\pi |t(\pi,\mathcal{A}) \leq \sigma(\mathcal{A}), (\pi, \mathcal{A}) \in \mathcal{I}\times \mathcal{P} \}|\end{equation*}such that $\sum \limits_{\mathcal{A} \in \mathcal{P}^{\sigma}}(\mathcal{A}) \leq\kappa $[/latex]
 Time-minimal Algorithm Alignment - Definition	[latex]Given a portfolio of algorithms $\mathcal{P}$, set of instance $\mathcal{I}$,runtime as a performance metric $t: \mathcal{I} \times \mathcal{P} \to\mathbb{R}$, a runtime cutoff $\kappa$, and an unordered schedule $\sigma$, thetime-minimal algorithm alignment problem is to find a permutation $\rho$ suchthat:\begin{align*}\rho &\in arg \min \limits_{\rho:\{1,\dots, |\mathcal{P}|\} \to \mathcal{P}}\sum \limits_{\pi \in \mathcal{I}} \tau_{\sigma, \rho}(\pi)\\\tau_{\sigma, \rho}(\pi) &= \begin{cases} \sum \limits_{j=1}^{min(\mathcal{P})-1} \sigma(\rho(j)) + t(\pi,\rho(min(\mathcal{P})) &, \mbox{if } P \neq \emptyset\\ \kappa &, \mbox{else}\end{cases}\\\mathcal{P} &= \{l \in \{1, \dots, |\mathcal{P}| \} | t(\pi, \rho(l)) \leq\sigma(\rho(l))\end{align*}[/latex]
Instance Features : Counting Features and Probing 	[latex]Counting Features:\\ \\By analyzing instances, we can compute some statistics about theircharacteristics, e.g. no. of clauses or variables in SAT formulae.\\ \\ \\Probing Features:\\ \\By running algorithm for instances for short amount of time, we can analyze howalgo behaves on this instance, e.g. no. steps to best local minimum per run.[/latex]
SATzilla - What is it used for? What is the idea? 	[latex]\begin{itemize}\item used for algorithm selection in SAT (won several first places)\item Idea:\begin{enumerate}\item use static algorithm schedule (pre-solving schedule)\item if pre-solving schedule failed to solve instance at hand, computeinstance features of the instance\item run algorithm with best predicted performance\\$\Rightarrow$ use $k$ regression models for $k$ algorithms in the portfolio topredict performance of each algorithm\end{enumerate}\end{itemize}[/latex]
