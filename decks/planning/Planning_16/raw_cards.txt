Definition - Image of states (Strong nondeterministic planning)  	[latex]Image of set of states $T$ w.r.t. operator $o$ is set of states that can bereached by executing $o$ in any of the states in $T$.[/latex]
Formal Definition - Image of state/image of state set 	[latex]Image of state $s$:\begin{equation*}img_{o}(s) = \{s' \in S | s \stackrel{o}{\to}s'\} = app_o (s)\end{equation*}Image of stateset $T$:\begin{equation*}img_o (T) = \bigcup \limits_{s \in T} img_o (s)\end{equation*}[/latex]
Definition - weak preimage  	[latex]Intuition:\\Weak preimage of set of states $T$ w.r.t. operator $o$ is set of all statesfrom which a state in $T$ can be reached by applying $o$.\\ \\Formal:\\Weak preimage of state $s'$:\begin{equation*}wpreimg_o (s') = \{s \in S | s \stackrel{o}{\to}s'\}\end{equation*}Weak preimage of set of states $T$:\begin{equation*}wpreimg_o (T) = \bigcup \limits_{s \in T} wpreimg_o (s)\end{equation*}[/latex]
Strong preimage of set of states (Strong nondeterministic planning)  	[latex]Intuition:\\Strong preimage of set of states $T$ w.r.t. operator $o$ is set of all statesfrom which a state in $T$ is ALWAYS reached when executing $o$.\\ \\Formal:\\\begin{equation*}spreimg_o (T) = \{s \in S | \exists s' \in T : s \stackrel{o}{\to} s' \wedgeimg_o (s) \subseteq T\}\end{equation*}[/latex]
Algorithms for strong planning  	\begin{itemize}\item Dynamic programming (backward)\\Compute operator/distance/value for state based on operators/distances/valuesof all its successors\begin{enumerate}\item zero actions needed for goal states\item If states with $i$ actions to goal known, states with $\leq i+1$ actionsto goal easily identified$\Rightarrow$ automatic reuse of plan suffixes already found\end{enumerate}\item Heuristic search (forward)\\Strong planning viewed as AND/OR graph search\begin{enumerate}\item OR nodes = choice between operators\item AND nodes = choice between effects\end{enumerate}\end{itemize}
Planning by dynamic programming  	[latex]Idea:\\If for all successors of state $s$ w.r.t. operator $o$ a plan exists, assignoperator $o$ to $s$.\\Steps:\begin{itemize}\item Base case $i=0$ $\Rightarrow$ goal state $ = $ nothing to do\item Inductive case $i \geq 1$: If $\pi(s)$ still undefined and exists $o \inO$ s.t. for all $s' \in img_o (s)$ state $s'$ is goal state or $\pi(s')$ wasassigned in earlier iteration: assign $\pi(s) = o$\end{itemize}Backward distances:\\If $s$ assigned a value on iteration $i \geq 1$, backward distance of $s$ is$i$. Dynamic programming essentially computes backward distances of states.[/latex]
Definition - Backward distance sets (Strong nondeterministic planning)  	[latex]Let $G$ set of states, $O$ set of operators.\\Backward distance sets $D_{i}^{bwd}$ for $G$ and $O$ are those states for whichthere is guarantee of reaching a state in $G$ with at most $i$ operatorapplications of operators in $O$:\begin{align*}D_{0}^{bwd} &= G\\D_{i}^{bwd} &= D_{i-1}^{bwd} \cup \bigcup \limits_{o \in O} spreimg_o(D_{i-1}^{bwd} \text{ for all } i \geq 1\end{align*}[/latex]
Definition - backward distance (Strong nondeterministic planning) 	[latex]Let $G$ set of states, $O$ set of operators, $D_{0}^{bwd}, D_{1}^{bwd}, \dots$backward distance sets for $G$ and $O$.\\Then the backward distance of state $s$ for $G$ and $O$ is:\begin{equation*}\delta_{G}^{bwd}(s) = \min \{i \in \mathbb{N} | s \in D_{i}^{bwd}\}\end{equation*}with $\min \emptyset = \infty$[/latex]
Strong plans based on distance sets (Strong nondeterministic planning)  	[latex]\begin{enumerate}\item Let $S' \subseteq S$ be states having finite backward distance for$G=S_*$ and $O$\item Let $s \in S'$ be state with distance $i = \delta_{G}^{bwd}(s) \geq 1$\item Assign to $\pi(s)$ any operator $o \in O$ s.t. $img_{o}(s) \subseteqD_{i-1}^{bwd}$. Then $o$ decreases backward distance by at least one!\end{enumerate}Then $\pi$ is strong plan for $ \mathcal{T}$ iff $I \in S'$\\ \\$\Rightarrow$ Drawback: represents states explicitly, stops being feasible at$10^8$ states\\$\Rightarrow$ to plan with bigger transition systems, need to take advantage ofstructural properties of transition system\\$\Rightarrow$ represent state sets using propositional logic![/latex]
