Pattern database heuristics: general idea  	-> abstraction heuristic-> some aspects of task = perfect precision, others = not represented at all
Definition: Projections  	[latex]Let $\Pi$ be an FDR planning task with variables $V$ and states $S$.\\Let $P \subseteq V$ and $S'$ set of states over $P$.\\ \\Projection $\pi_{P}: S \to S'$ is:\begin{equation*}\Pi_{P}(s) := s|_{P} \text{ with } s|_{P}(v) := s(v)\ \forall v \in P\end{equation*}We call $P$ the pattern of the projection $\pi_{P}$[/latex]
Definition - Pattern database heuristic  	[latex]Abstraction heuristic induced by projection $\pi_{P}$ called PDB heuristic(pattern database heuristic).\\Shorthand: $h^{P} := h^{\pi_{P}}$[/latex]
[latex]How do you implement pattern database heuristic $h^{P}$ for a given pattern $P$for a planning task $\Pi$?[/latex] 	[latex]\begin{enumerate}\item precomputation step = compute graph representation for abstraction $\mathcal{T}(\Pi)^{\pi_{P}}$ \\ $\Rightarrow$ compute abstract goal distance for each abstract state\item during search, perform lookups of precomputated abstract goal distances\end{enumerate}[/latex]
PDB - Heuristic : Precomputation step  	[latex]Let $\Pi$ planning task, $P$ pattern.\\Let $ \mathcal{T} = \mathcal{T}(\Pi), \mathcal{T}' = \mathcal{T}^{\pi_{P}}$.\begin{itemize}\item Goal: compute graph representation of $ \mathcal{T}'$\item $ \mathcal{T}'$ defined through homomorphism of $ \mathcal{T}$\\(each concrete transition induces abstract transition)\item Cannot compute $ \mathcal{T}'$ by iterating transition of $ \mathcal{T}$\\$\Rightarrow$ inefficient, takes time $\Omega(|| \mathcal{T} ||)$\item need computation that is polynomial in $ || \Pi || $ and $|| \mathcal{T}'||$\item Idea: Remove trivially inapplicable operators from $\Pi$, then compute asyntactic projection using $P$\end{itemize}[/latex]
Definition - Syntactic projections  	[latex]Let $\Pi = \langle V, I, O, \gamma \rangle$ FDR planning task, $P \subseteq V$ be pattern (subset of variables).\\ \\Syntactic projection $\Pi|_{P}$ of $\Pi$ to $P$ is FDR task:\begin{equation*}\langle P, I|_{P}, \{o|_{P} | o \in O \}, \gamma_{P} \rangle \text{ with }\end{equation*}\begin{itemize}\item $\varphi|_{P}$ is obtained from $\varphi$ by replacing atoms $(v=d)$ with $v \notin P$ by $\top$\\(any atoms with vars not in $P$ replaced by $\top$)\item $o|_{P}$ for operator $o$ obtained by replacing all formulas $\varphi$ in preconditions or effect conditions of $o$ with $\varphi|_{P}$ and all atomiceffects $(v:=d)$ with $v \notin P$ with empty effect $\top$\\(any atoms in precondition and effect of $o$ with vars not in $P$ replaced by$\top$)\end{itemize}[/latex]
Definition - trivially inapplicable operator  	[latex]An operator $\langle \xi, e \rangle$ of a $SAS^+$ task is called triviallyinapplicable if\begin{itemize}\item $\xi$ contains the atoms $(v = d$ and $(v=d')$ for some var $v$ andvalues $d \neq d'$\item $e$ contains effects $(v:=d)$ and $(v:=d')$ for some var $v$ and values$d \neq d'$\end{itemize}[/latex]
Notes - trivially inapplicable operators  	-> never applicable, can safely be omittied from planning tasks-> can be detected in linear time
[latex]Definition - Trivially unsolvable $SAS^+$ tasks[/latex] 	[latex]A $SAS^+$ task $\Pi = \langle V, I, O, \gamma \rangle$ is trivially unsolvableif $\gamma$ contains atoms $(v=d)$ and $(v=d')$ for some variable $v$ andvalues $d \neq d'$[/latex]
Notes - Trivially unsolvable SAS+ tasks  	-> Trivially unsolvable tasks have no goal states => unsolvable-> can be detected in linear time
Equivalence theorem for syntactic projections  	[latex]Let $\Pi$ be a $SAS^+$ task that is not trivially unsolvable and has notrivially inapplicable operators and $P$ a pattern for $\Pi$.\\Then $ \mathcal{T}(\Pi|_{P}) \stackrel{G}{\sim} \mathcal{T}(\Pi)^{\pi_{P}}$[/latex]
Notes - Equivalence Theorem  	[latex]\begin{itemize}\item restrictions to SAS+ tasks and tasks with no trivially inapplicableoperators are necessary\item does not hold with conditional effects\item result slightly generalizable, if negation-free formulae allowed (but still noconditional effects):\\$\Rightarrow$ then, unlabeled graph of $ \mathcal{T}(\Pi)^{\pi_{P}}$ isomorphicto subgraph of unlabeled graph of $ \mathcal{T}(\Pi|_{P})$\\$\Rightarrow$ we can use $ \mathcal{T}(\Pi_{P})$ to derive admissible estimateof $h^{P}$\end{itemize}[/latex]
Are their conversions of FDR tasks to SAS+ tasks? How costly are they?  	Yes!Most direct conversions can exponentially increase task size in worst case
PDB-Heuristics: Lookup Step - General Idea 	[latex]\begin{itemize}\item only PDB must be stored during search (not the abstract transitionsystem)\\$\Rightarrow$ space requirements for PDB's linear in number of abstract states$S'$ (one table entry per abstract state)\item during search, $h^P(s)$ computed by mapping $\pi_{P}(s)$ to naturalnumber in range $[0, |S'|-1]$ using perfect hash function, then lookup tableentry for that number\end{itemize}[/latex]
PDB-Heuristics: Lookup step - Algorithm  	[latex]Let $P = \{v_1, \dots, v_k\}$ be pattern.\begin{itemize}\item Assume all variable domains counted from $0$, $ \mathcal{D}_v = \{0,\dots, | \mathcal{D}_v| -1\}$\item Precompute $N_i = \prod \limits_{j=1}{i-1} | \mathcal{D}(v_j) | $ for all$i$\item Lookup heuristic value $h^{P}(s)$: $index = \sum \limits_{i=1}^{k}N_i s(v_i)$ for a state $s$\end{itemize}\begin{enumerate}\item fast: performed in $O(k)$ (much faster than most relaxation heuristics)\end{enumerate}[/latex]
PDB - Pattern collections : Motivation  	[latex]\begin{itemize}\item space requirements for database grow exponentially with number of statevariables in pattern\\$\Rightarrow$ limiting usefulness of single PDB heuristic\item solution: collection of multiple patterns\item when using two patterns $P_1, P_2$, maximum of $h^{P_1}, h^{P_2}$ can beused as admissible heuristic\item When possible, preferable to use sum of $h^{P_1}, h^{P_2}$, since\begin{equation*}h^{P_1} + h^{P_2} \geq \max \{h^{P_1},h^{P_2} \}\end{equation*}\end{itemize}[/latex]
Theorem - Additive pattern sets (PDB heuristics)  	[latex]Intuition:\\Given set of patterns:\\If no operator has effect on two variables present in different patterns, thesum of the pattern heuristics is admissible heuristic.\\ \\Formal:\\Let $P_1, \dots, P_k$ be patterns for FDR task $\Pi$.\\ \\If exists no operator that has effect on variable $v_i \in P_i$ and on variable$v_j \in P_j$ for some $i \neq j$, then $\sum \limits_{i=1}^{k} h^{P_i}$ isadmissible and consistent heuristic for $\Pi$.[/latex]
PDB Heuristics - Finding additive pattern sets  	[latex]Given pattern collection $ \mathcal{P}$ do:\begin{itemize}\item Build compatibility graph for $ \mathcal{P}$:\\\begin{enumerate}\item Vertices = patterns $P \in \mathcal{P}$\item Edge between two vertices iff no operator affects both patterns\end{enumerate}\item Compute all maximal cliques of the graph\\(Correspond to maximal additive subsets of $ \mathcal{P}$\begin{enumerate}\item computing large cliques = NP-hard, graph can have exponentially manymaximal cliques\item However, output-polynomial algorithms exist to find all maximal cliques =good practical results\end{enumerate}\end{itemize}[/latex]
Definition - Canonical heuristic function  	[latex]Let $\Pi$ be FDR planning task, $ \mathcal{P}$ pattern collection for $\Pi$.\\Canonical heuristic for pattern collection $ \mathcal{P}$, $h^{ \mathcal{P}}$ isdefined as\begin{equation*}h^{ \mathcal{P}} = \max \limits_{ \mathcal{D} \in \mathit{cliques}(\mathcal{P}) \sum \limits_{P \in \mathcal{P}} h^{P}(s)\end{equation*}where $\mathit{cliques}( \mathcal{P})$ is set of all maximal cliques incompatibility graph for $ \mathcal{P}$.\\ \\[/latex]
Canonical heuristic function - Properties  	[latex]For all choices of $ \mathcal{P}$, heuristic $h^{ \mathcal{P}}$ is admissibleand consistent.[/latex]
 How good is the canonical heuristic? 	-> Best possible admissible heuristic one can derive from a set of patternsusing the additivity criterion-> Better estimates can be obtained from projection heuristic with more generaladditivity criterion based on cost partitioning
Theorem - Dominated Sum  	[latex]Intuition:\\The heuristic obtained from a pattern set that is subset of a big  pattern is dominated by the heuristic obtained from the big pattern.\\ \\Formal:\\Let $\{P_1, \dots, P_k\}$ be additive pattern set for FDR task, let $P$ bepattern with $P_i \subseteq P$ for all $i \in \{1, \dots, k \}$.\\Then\begin{equation*}\sum \limits_{i=1}^{k} h^{P_i} \leq h^{P}\end{equation*}[/latex]
Corollary building on theorem - Dominated sum  	[latex]Let $\{P_1, \dots, P_n\}$ $\{Q_1, \dots, Q_m\}$ be additive pattern sets of FDRtask where for all $i$ we have that $P_i \subseteq Q_j$ for some $j$.\\Then\begin{equation*}\sum \limits_{i=1}^{n}h^{P_i} \leq \sum \limits_{j=1}^{m}h^{Q_j}\end{equation*}[/latex]
Dominance Pruning: What is it useful for, how is it done and how efficientlycan it be done?  	[latex]\begin{itemize}\item Useful: simplify representation of $h^{ \mathcal{P}}$\item Idea: sum dominated by other sums are pruned\item Efficient: can be performed in polynomial time\end{itemize}[/latex]
Pattern selection as optimization problem  	[latex]\begin{itemize}\item Given: set of candidate solutions = pattern collections fitting intomemory\item Find: pattern collection with high heuristic quality\item Idea: apply local search to find good solutions (global optimality notfeasible computationally)\end{itemize}[/latex]
Basic Idea: Pattern selection as optimization problem  	-> start from small
patterns of only single variable mentioned in goal formula each-> grow by adding slightly larger patterns-> stop when heuristic quality no longer improves
Theorem - Non goal patterns = trivial 	[latex]Let $\Pi$ be $SAS^+$ task that is not trivially unsolvable and $P$ be patternfor $\Pi$ s.t. no variable in $P$ is part of $\gamma$.\\\\Then $h^{P}(s) =0 $ for all states $s$[/latex]
Search neighborhood: Idea (pattern selection as optimization) 	[latex]incremental growth of current pattern collection = search neighborhood\\Successors obtained by:\begin{itemize}\item starting from current patterns $ \mathcal{P}$\item choosing some $P \in \mathcal{P}$ (do not remove from $ \mathcal{P}$)\item generate new pattern by extending $P$ with single variable\item add $P'$ to $ \mathcal{P}$ to form new pattern set\item iterate\end{itemize}[/latex]
Definition - Causal graph  	[latex]Intuition:\\an arc from u to v in the causal graph indicates that variable u is in some wayrelevant for modifying value of v\\ \\Formal:\\Let $\Pi = \langle V,I,O, \gamma$ be FDR task.\\Causal graph of $\Pi$, $CG(\Pi)$ is directed graph with vertices $V$, arc from$u \in V$ to $v \in V$ iff $u \neq v$ and exists $o \in O$ with:\begin{itemize}\item $u$ appears anywhere in $o$\item $v$ modified by an effect of $o$\end{itemize}[/latex]
Definition - causally relevant variables 	[latex]Let $\Pi = \langle V, I, O, \gamma$ be FDR task and $P$ be pattern.\\$v \in P$ is causally relevant for $P$ if $CG(\Pi)$ contains directed path from$v$ to $v' \in P$ where $v'$ is mentioned in goal formula $\gamma$.[/latex]
Theorem - Causally irrelevant variables useless  	[latex]Let $P$ be pattern for FDR task $\Pi$, $P' \subseteq P$ consist of allvariables causally relevant for $P$.\\Then $h^{P'}(s) = h^{P}(s)$ for all states $s$.[/latex]
Definition - Causally connected patterns  	[latex]Let $\Pi$ be FDR task, $P$ be pattern.\\$P$ is causally connected if subgraph of $CG(\Pi)$ induced by $P$ is weaklyconnected = contains path from every vertex to every other vertex (ignoring arcdirections)[/latex]
Theorem - Disconnected patterns are decomposable 	[latex]Let $P$ be non-causally connected pattern for $SAS^+$ task $\Pi$ and $P_1, P_2$partition of $P$ into non-empty subsets such that $CG(\Pi)$ contains no arcbetween the two sets.\\Then $h^{P_1}(s) + h^{P_2}(s) = h^{P}(s)$ for all states $s$[/latex]
Pattern selection as local search - Search neighborhood  	[latex]Neighours of $ \mathcal{P} =$ all pattern collections $ \mathcal{P} \cup \{P'\}$with:\begin{enumerate}\item $P' = P \cup \{v\}$ for some $P \in \mathcal{P}$\item $P' \notin \mathcal{P}$\item all variables of $P'$ are causally relevant in $P'$\item $P'$ causally connected\item all pattern databases in $ \mathcal{P} \cup \{P'\}$ can be representedwithin prespecified space limit\end{enumerate}[/latex]
Pattern selection as local search - Search Neighborhood -->Checks for causal relevance and connectivity  	[latex]$\bullet\ v$ predecessor of some $u \in P$ in causal graph\\\begin{equation*}\text{ or}\end{equation*}$\bullet\ v$ successor of some $u \in P$ in causal graph and mentioned in goalformula[/latex]
Pattern selection as local search - Ranking candidate solutions (patterncollections) => Mean Value Approach (Idea + Pro/Con) 	[latex]Mean value approach:\begin{itemize}\item only additive sets as pattern collections\\$\Rightarrow$no need for canonical heuristic function\item quality of single pattern $=$ mean heuristic value (higher $=$better)\item quality of pattern collection $=$ sum of individual pattern qualities\end{itemize}Pros (mean value approach):\begin{enumerate}\item quality measure useful (mean heuristic value correlated with searchperformance) \item mean heuristic values easy to calculate\end{enumerate}Cons (mean value approach):\begin{enumerate}\item better predictors for search performance than mean heuristic values exist\item infinite heuristic estimates not reasonably representable\item pattern collections that are not fully additive can not be represented\end{enumerate}[/latex]
Pattern selection as local search - Ranking candidate solutions (patterncollections) => Korf, Reid and Edelkamp formula (Idea + formula) 	[latex]Goal - ranking pattern collections:\\Minimize number of node expansions for canonical heuristic function duringactual search phase\\ \\Idea - Korf,Reid,Edelkamp formula:\\predict node expensions of heuristic search algos based on heuristicparameters\\$\Rightarrow$try to estimate these parameters\\ \\Formula (Korf, Reid, Edelkamp):In limit of large $c$, expected number of node expansions for failed iterationof $IDA^*$ with depth treshold $c$ is\begin{equation*}E(N,c,P) = \sum \limits_{i=0}^{c} N_i P(c-i)\end{equation*}where\begin{itemize}\item $N = \langle N_0, N_1, \dots, N_c \rangle$ is brute-force tree shape\\$N_i = $ number of search nodes in layer $i$ of brute-force search tree\item $P$ is equilibrium distribution of heuristic function\\$P(k) = $probability that uniformly picked node from layer $i$ has heuristic value $\geq k$ in limit of large $i$\end{itemize}[/latex]
Pattern selection as local search - Korf, Reid, Edelkamp formula:Using the formula for quality estimation  	[latex]Problems:\begin{enumerate}\item only holds in limit\item applies to $IDA^*$ not to $A^*$\item we do not know $N$ or $P$\end{enumerate}However:\begin{itemize}\item do not need absolute estimates, only need to know which heuristic ingiven set is best\item mostly, good heuristics for $IDA^*$ are good heuristics for $A^*$\item can use random walk and sampling to get estimates without knowing $N$ and $P$\end{itemize}[/latex]
Pattern selection as local search - measuring degree of improvement (estimating heuristic quality in practice)  	[latex]Measuring degree of improvement:\begin{itemize}\item Generate $M$ states $s_1, \dots, s_M$ through random walks in searchspace from initial state\item degree of improvement of pattern collection $ \mathcal{P}'$ generated assuccessor of collection $ \mathcal{P}$ is number of sample states $s_i$ with:\begin{equation*}h^{ \mathcal{P}'}(s_i) > h^{ \mathcal{P}} (s_i)\end{equation*}\end{itemize}[/latex]
[latex]Pattern databases in practice - Computing $h^{ \mathcal{P}'}(s)$[/latex] 	[latex]\begin{itemize}\item so we need computing $h^{ \mathcal{P}'}(s)$ for some states $s$ and eachcandidate successor collection $ \mathcal{P}'$\item we have PDBs for all patterns in $ \mathcal{P}$, but not for new pattern$P' \in \mathcal{P}'$ with $P' = P \cup \{v\}$ for some $P \in \mathcal{P}$\item if possible, we want to avoid computing complete pattern database exceptfor best successor\end{itemize}Idea:\\\begin{itemize}\item For $SAS^+$ tasks $\Pi$, $h^{P'}(s)$ identical to optimal solution lengthfor syntactic projection $\Pi|_{P'}$\item can use any optimal planning algorithm for this, e.g. $A^*$ using $h^P$as heuristic\end{itemize}[/latex]
