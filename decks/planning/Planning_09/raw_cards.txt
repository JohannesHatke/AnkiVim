Invariants  	-> logical formulae that are true in all reachable states
 Computing invariants 	[latex]- Testing if arbitrary formula $\varphi$ is invariant is as hard as planning- to be efficient (poly-time), compute only subset of useful invariants[/latex]
 Invariant synthesis algorithm 	[latex]Most algorithms based on generate-test-repair paradigm:\begin{itemize}\item Suggest invariant candidates by enumerating all possible formulas $\varphi$ of certain size.\item Test: Try to prove $\varphi$ is invariant, inductively:\begin{enumerate}\item Check initial state satisfies $\varphi$\item Check that if $\varphi$ true in current state, it remains true afterapplying single operator\end{enumerate}\item Repair: If invariant test fails, replace candidate $\varphi$ by weakerformula, ideally exploiting why proof failed.\end{itemize}[/latex]
Invariant uses in planning 	[latex]\begin{itemize}\item Regression search: Prune states that violate invariants\item Planning as sat: Add invariants to SAT encoding of planning task to gettighter constraints\item Reformulation: Derive more compact state space representation\end{itemize}[/latex]
Mutexes (Finite Domain Representation) 	Invariants that take form of binary clauses called mutexes, because they state that certain variable assignments cannot be simultaneoulsy true and are hence mutually exclusive.
