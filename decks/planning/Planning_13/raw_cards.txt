LM-Cut Heuristic: Motivation (High level) 	[latex]\begin{itemize}\item Simpler RPG-based relaxation heuristics:\begin{itemize}\item admissible but not informative ($h_{\mathit{max}}$)\item informative, but not admissible ($h_{\mathit{add}}, h_{\mathit{sa}},h_{\mathit{FF}}$)\end{itemize}\item LM-Cut: informative admissible domain-independent relaxation heuristic\end{itemize}[/latex]
LM-Cut : Counterexample for deriving suitable heuristics from non-disjoint landmarks  	[latex]Knowing that:\begin{itemize}\item in each plan starting in $s$, at least one of operators $o_1$ and$o_2$ is applied\\\\and\\ \\\item in each plan starting in $s$, at least one of operators $o_2$ and $o_3$is applied\end{itemize}does not imply that $h^*(s) \geq 2$ since the one-step action sequence $o_2$can be a plan for $s$[/latex]
Definition - Landmark  	[latex]A landmark of $SAS^+$ task $\Pi$ is set of actions $L$ s.t. each plan for $\Pi$contains at least one acion from $L$.\\Landmark $L$ is minimal if no $L' \subseteq L$ is landmark for $\Pi$.[/latex]
Theorem - Landmarks and admissible heuristics  	[latex]Let $\Pi$ with initial state $I$ be $SAS^+$ task. If there are $n$ disjoint landmarks for $\Pi$, then $h(I) = n$ is admissibleestimate for state $I$.[/latex]
Theorem - Landmarks in delete relaxation 	[latex]Theorem:\\Let $\Pi\  SAS^+$ task and $\Pi^+$ its delete relaxation.\\Let $L^+ = \{o^+ | o \in L \}$ be landmark for $\Pi^+$, then $L$ is alsolandmark for $\Pi$.Implications:\\\begin{itemize}\item suffices to search for landmarks in delete relaxation\\$\Rightarrow$ can only lead to too few discovered landmarks, not too many\\$\Rightarrow$ admissibility of heuristic is preserved\end{itemize}[/latex]
Computing disjoint disjunctive action landmarks: Naive approach and simpler incomplete approach 	[latex]Naive approach:\begin{enumerate}\item Compute set $ \mathcal{L} = \{L_1, \dots, L_n$ of ALL minimal landmarksof the task\item Compute cardinality-maximal subset $ \mathcal{L}' \subseteq \mathcal{L}$s.t. all $L_i, L_j \in \mathcal{L}'$ with $L_i \neq L_j$ are pairwise disjointand return their number $| \mathcal{L}'|$\end{enumerate}Drawbacks naive approach $=$ both steps too complicated\\Simpler incomplete approach:\\ \\Idea: INCREMENTALLY compute set $ \mathcal{L} = \{L_1, \dots, L_n \}$ for SOMEdisjoint landmarks of the task\begin{enumerate}\item Compute some landmark $L_1$\item to compute $L_{i+1}$ consider only candidates disjoint from previouslandmarks $L_1, \dots L_i$\item stop when no more such landmarks exist\end{enumerate}[/latex]
Definition - Precondition-choice function  	[latex]A precondition-choice function (pcf) $D$ maps each action into one if itsprecondition (under assumption that each action has at least one precondition)[/latex]
Definition - Justification graph  	[latex]Justification graph $G(D)$ for precondition-choice function $D$ is directedgraph with vertices $=$ propositions and which has edge $(p,q$ labeled with $o$iff action $o$ adds $q$ and $D(o) = p$[/latex]
Definition - Cut (LM-Cut heuristic) 	[latex]For two nodes $s$ and $t$ in justification graph, an $s-t$ cut in thejustification graph is a subset $C$ of its edges s.t. all paths from $s$ to $t$use some edge from $C$. When $s$ and $t$ are clear, we simply call $C$ a cut.[/latex]
Theorem - cuts = landmarks  	[latex]Let $C$ be cut in justification graph for arbitrary precondition-choicefunction $D$. Then the edge labels for $C$ are a landmark.[/latex]
[latex]Definition - $h_{\mathit{max}}$ costs of atoms[/latex]  	[latex]Intuition:\\ $h_{\mathit{max}}^{c}(a) = $costs of making $a$ true under parallel relaxedsemantics, maximizing over precondition costs.\\ \\Formal:\\ Given fixed initial state $s$ and action cost function $c$, $h_{\mathit{max}}$cost of atom $a$, $h_{\mathit{max}}^{c}(a)$ is value of the label of the RPGproposition node for $a$ in last RPG layer after RPG computation (layer $0 =s$, action costs given by $c$) has converged.[/latex]
LM-cut Heuristic - Motivation (Inside view)  	-> in general = exponentially many precondition-choice functions => cannotcompute all relevant landmarks-> LM-cut heuristic = compute precondition-choice functions and cuts ingoal-directed way=> Efficient partitioning of actions into cuts-> best admissible planning heuristic
Theorem - LM-Cut Admissibility  	[latex]LM-cut heuristic never overestimates $h^*$, i.e. is admissible.[/latex]
LM-Cut for Planning Task with non-unit costs  	[latex]- LM-cut can be generalized to planning task with non-unit costs\begin{itemize}\item instead of setting operator costs to zero, decrease costs of alloperators in landmark by minimal cost of any operator in the landmark\\ $\Rightarrow$ leads to cost partitioning of operator costs between landmarks:\\Operator can be counted in more than one landmark, but sum of weights it iscounted with can not exceed its true cost\item Instead of incrementing heuristic value by one in each step, increase itby minimal cost of any operator in the landmark\end{itemize}- $h_{\mathit{LM-cut}}$ for planning tasks with non-unit costs is still  admissible (proof via cost-partitioning argument)[/latex]
Assumptions - LM-Cut Heuristic  	[latex]\begin{enumerate}\item STRIPS tasks with action costs $0$ or $1$ (generalization possible,heuristic remains admissible!)\item when computing landmark $L_{i+1}$, action $o$ costs zero if:\begin{itemize}\item it is dummy action $o_s$ constructing initial state from unique initialproposition $s$\item it is dummy action $o_t$ construction unique dummy goal proposition $t$from actual goal propositions\item it has already been included in one of previous landmarks $L_1, \dots,L_i$ (was already accounted for in heuristic computation)\end{itemize}\end{enumerate}[/latex]
