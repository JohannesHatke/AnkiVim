Motivation: hybrid systems  	[latex]\begin{enumerate}    \item dynamical system: continuous evolution of state over time    \item time models:\begin{itemize}    \item continuous: $t \in \mathbb{R}$    \item discrete: $t \in \mathbb{Z}$    \item hybrid: continuous time with discrete "instants" where something          "special" happens\end{itemize}\end{enumerate}State model:\begin{enumerate}    \item continuous: evolution described by ordinary differential equations:          $\dot{x} = f(x,u)$    \item discrete: evolution described by difference equations: $x_{k+1} =          f(x_k, u_k)$    \item hybrid: continuous space, but also discrete instants for which          something "special" holds\end{enumerate}[/latex]
Definition: Nondeterministc finite automaton 	[latex]An NFA is a tuple $\mathcal{A} = (Q, \Sigma, \Delta, q_0, F) $ with\begin{enumerate}    \item finite set of states $Q$    \item finite alphabet $\Sigma$    \item transition relation $\Delta \subseteq Q \times \Sigma \times Q$    \item initial state $q_0 \in Q$    \item set of final states $F \subseteq Q$\end{enumerate}[/latex]
NFA: Additional definitions  	[latex]\begin{enumerate}    \item A run $q_0 \sigma_0 q_1 \sigma_1 \dots$ of NFA $\mathcal{A}$ is a(finite) sequence of states and symbols where $q_0$ is initial state and $q_i,\sigma_i, q_{i+1} \in \Delta$.    \item NFA accepts word $\sigma_0 \sigma_1 \dots \sigma_n \in \Sigma^*$ iffthere is a run $q_0 \sigma_0 q_1 \sigma_1 \dots \sigma_n q_{n+1}$ visiting somefinal state $q_{n+1}$ at the end    \item Language $L( \mathcal{A} \in \Sigma^*$ recognized by NFA          $\mathcal{A}$ is set of accepted words.    \item Two NFA are equivalent iff they accept same Language    \item An NFA may be blocking and nondeterministic\end{enumerate}[/latex]
Definition: Deterministic finite automaton  	[latex]A deterministic finite automaton is a tuple $\mathcal{A} = (Q, \Sigma, \Delta,q_0, F)$ with:\begin{enumerate}    \item finite set of states $Q$    \item finite alphabet $\Sigma$    \item transition \emph{function} $\Delta. Q \times \Sigma \to Q$    \item initial state $q_0 \in Q$    \item set of final states $F \subseteq Q$.\end{enumerate}For every NFA there is a DFA that accepts the same language[/latex]
Definition: parallel composition of DFAs  	[latex]For two DFAs $\mathcal{A}_1 = (Q_1, \Sigma, \Delta_1, q_{0}^{1}, F_1)$ and $\mathcal{A}_2 = (Q_2, \Sigma, \Delta_2, q_{0}^{2}, F_2)$ we define $A_1 || A_2:= (Q, \Sigma, \Delta, q_0, F)$ with:\begin{enumerate}    \item $Q = Q_1 \times Q_2$    \item $\Delta((q_1, q_2), a) = (\Delta_1(q_1, a), \Delta_2(q_2, a))$ forall $(q_1, q_2) \in Q_1 \times Q_2$ and $a \in \Sigma$    \item $q_0 = (q_{0}^{1}, q_{0}^{2})$    \item $F = F_1 \times F_2$\end{enumerate}[/latex]
Definition: Labeled state transition system (LSTS)  	[latex]A labeled state transition system (LSTS) is a tuple $\mathcal{LSTS} = (\Sigma,Lab, Edge, Init)$ with:\begin{enumerate}    \item (possibly infinite) state set $\Sigma$    \item finite set of (synchronization) labels $Lab$    \item transition relation $Edge \subseteq \Sigma \times Lab \times \Sigma$    \item non-empty set of initial states $Init \subseteq \Sigma$\end{enumerate}[/latex]
What type of system is an LSTS? What is the difference to an NFA?  	[latex]type of system: discrete\\ \\differences to NFA:\begin{itemize}    \item infinitely many states allowed    \item no acceptance\end{itemize}[/latex]
Semantics of LSTS  	[latex]Operational semantics:\begin{equation*}\frac{(\sigma, a, \sigma') \in Edge}{\sigma \stackrel{a}{\to} \sigma'}\end{equation*}\begin{enumerate}\item single rule execution $=$ step\item run: sequence of steps $\sigma_0 \stackrel{a_0}{\to} \sigma_1\stackrel{a_1}{\to}\sigma_2 \dots$ where $\sigma_0 \in Init$\item state is called reachable if there is a run leading to it\end{enumerate}[/latex]
Parallel composition: Types of transitions  	[latex]\begin{enumerate}    \item component-local, non-synchronizing transitions:          labels belonging to one component's label set only, executed in          interleaved manner    \item synchronizing transitions of components, agreeing on the label,          executed synchronously\end{enumerate}[/latex]
Definition: Parallel composition of LSTSs  	[latex]Let $\mathcal{LSTS_1} = (\Sigma_1, Lab_1, Edge_1, Init_1)$ and $\mathcal{LSTS_2} = (\Sigma_2, Lab_2, Edge_2, Init_2)$. The parallelcomposition $\mathcal{LSTS_1} || \mathcal{LSTS_1}$ is LSTS $(\Sigma, Lab, Edge,Init)$ with:\begin{enumerate}    \item $\Sigma = \Sigma_1 \times \Sigma_2$    \item $Lab = Lab_1 \cup Lab_2$    \item $((s_1, s_2), a, (s_{1}^{\prime}, s_{2}^{\prime}) \in Edge$ iff\begin{itemize}    \item $a \in Lab_1 \cap Lab_2, (s_1, a, s_{1}^{\prime}) \in Edge_1$, and$(s_2, a, s_{2}^{\prime} \in Edge_2$ or    \item $a \in Lab_1 \backslash Lab_2, (s_1, a, s_{1}^{\prime} \in Edge_1$and $s_2 = s_{2}^{\prime}$ or    \item $a \in Lab_2 \backslash Lab_1, (s_2, a, s_{2}^{\prime} \in Edge_2$and $s_1 = s_{1}^{\prime}$\end{itemize}\item $Init = Init_1 \times Init_2$\end{enumerate}[/latex]
Labeling of LSTSs  	[latex]To be able to formalize properties of LSTSs, we define:\begin{enumerate}    \item a set of atomic propositions $AP$    \item a labeling function $L: \Sigma \to 2^{AP}$ assigning a set of atomic          propositions to each state\end{enumerate}The set $L(\sigma)$ consists of all propositions that are defined to hold in$\sigma$.\\ \\Two kinds of labels:\begin{itemize}    \item propositional labels on states    \item synchronization labels on edges\end{itemize}[/latex]
Definition: Labeled transition system (LTS) 	[latex]A labeled transition system (LTS) is a tuple $\mathcal{LTS} = (Loc, Var, Lab,Edge, Init)$ with\begin{enumerate}    \item finite set of locations $Loc$    \item finite set of typed variables $Var$    \item finite set of (synchronization) labels $Lab$    \item finite set of transitions $Edge \subseteq Loc \times Lab \times2^{V^2}$ \times Loc    \item initial states $Init \subseteq \Sigma$.\end{enumerate}where: \begin{itemize}    \item $V$ is the set of valuations $\nu: Var \to Domain$    \item $\Sigma$ is the set of states $\sigma = (l, \nu) \in Loc \times V$\end{itemize}[/latex]
Definition: LTS with stuttering  	[latex]A labeled transition system with stuttering is a tuple $\mathcal{LTS} = (Loc,Var, Lab, Edge, Init)$ with:\begin{enumerate}    \item finite set of locations $Loc$    \item finite set of (typed) variables $Var$    \item finite set of (synchronization) labels $Lab$ with special stutterlabel $\tau \in Lab$    \item finite set of transitions $Edge \subseteq Loc \times Lab \times2^{V^2} \times Loc$ with special stutter transitions $(l, \tau, Id, l)$ foreach location $l \in Loc$    \item initial states $Init \subseteq \Sigma$\end{enumerate}[/latex]
Semantics of LTS  	[latex]Operational semantics:\begin{equation*}\frac{(l, a, \mu, l') \in Edge\ \ (\nu, \nu') \in \mu}{(l, \nu)\stackrel{a}{\to}(l', \nu')\end{equation*}\begin{itemize}    \item run: $\sigma_0 \stackrel{a_0}{\to} \sigma_1\stackrel{a_1}{\to}\sigma_2 \dots$ with $\sigma_0 \in Init$    \item state is called reachable if there is run leading to it\end{itemize}An LTS induces an (usually infinite) LSTS[/latex]
Discrete transitions of LSTSs  	[latex]\begin{equation*}Edge \subseteq Loc \times Lab \times \mathbf{2^{V^2}} \times Loc\end{equation*}\begin{enumerate}    \item a discrete transition $(l, a, \mu, l')$ must specify all valuations$(\nu, \nu') \in \mu$ that are allowed    \item in practice, usually represent $\mu$ by pair $(g, a)$\begin{enumerate}    \item guard $g$ given as logical formula, describes allowed values $\nu$    \item assignment (or reset) $a$ given as list of expressions $x:=e$ where         $e$ is logical expression describing change of $\nu'(x)$ possibly        depending on $\nu$\end{enumerate}Note that this is a restriction of the general model of Hybrid Automata.\end{enumerate}[/latex]
Definition: parallel composition of LSTSs  	[latex]Let $\mathcal{LTS_1} = (Loc_1, Var, Lab_1, Edge_1, Init_1)$ and  $\mathcal{LTS_2} = (Loc_2, Var, Lab_2, Edge_2, Init_2)$. The parallelcomposition $\mathcal{LTS_1} || \mathcal{LTS_2}$ is the LTS $\mathcal{LTS} =(Loc, Var, Lab, Edge, Init)$ where:\begin{enumerate}    \item $Loc = Loc_1 \times Loc_2$    \item $Lab = Lab_1 \times Lab_2$    \item $Init = \{((l_1, l_2), \nu) | (l_1, \nu) \in Init_1 \wedge (l_2, \nu)\in Init_2\}\end{enumerate}[/latex]
 Definition: parallel composition of LSTSs  	 	[latex]Let $\mathcal{LTS_1} = (Loc_1, Var, Lab_1, Edge_1, Init_1)$ and$\mathcal{LTS_2} = (Loc_2, Var, Lab_2, Edge_2, Init_2)$. The parallel composition$\mathcal{LTS_1} || \mathcal{LTS_2}$ is the LTS $\mathcal{LTS} =(Loc, Var, Lab,Edge, Init)$ where:\begin{enumerate}    \item $Loc = Loc_1 \times Loc_2$\item $Lab = Lab_1 \times Lab_2$    \item $Init = \{((l_1, l_2), \nu) | (l_1,\nu) \in Init_1 \wedge (l_2, \nu)\in Init_2\}$\item $((l_1, l_2), a, \mu, (l_1^{\prime}, l_2^{\prime}) \in Edge$ iff thereexist $(l_1, a, \mu_1, l_1^{\prime} \in Edge_1$ and $(l_2, a, \mu_2, l_2^{\prime} \in Edge_2$ s.t. either:\begin{itemize}    \item $a_1 = a_2 = a$ or    \item $a_1 = a \in Lab_1 \backslash Lab_2$ and $a_2 = \tau$ or    \item $a_1 = \tau a_2 = a \in Lab_2 \backslash Lab_1$\end{itemize}and $\mu = \mu_1 \cap \mu_2$\end{enumerate}[/latex]
Definition: Hybrid automaton  	[latex]A hybrid automaton (HA) $\mathcal{H} = (Loc, Var, Lab, Edge, Act, Inv, Init)$with\begin{enumerate}    \item finite set of locations $Loc$    \item finite set of real-valued variables $Var$    \item finite set of (synchronization) labels $Lab, \tau \in Lab$ (stutter          label)    \item finite set of transitions $Edge \subseteq Loc \times Lab \times2^{V^2} \times Loc$ (including stutter transitions $(l, \tau, Id, l)$ for each        location    \item function $Act$ assigning a set of activities $f: \mathbb{R}^+ \to V$to each location. The activity sets are time-invariant, i.e. $f\in Act(l)$implies $(f+t) \in Act(l)$ where $(f+t)(t') = f(t+t')$ for all $t' \in\mathbb{R}^+$    \item function $Inv$ assigning an invariant $Inv(l) \subseteq V$ to eachlocation $l \in Loc$    \item initial states $Init \subseteq \Sigma$\end{enumerate}where: \begin{itemize}    \item $V$ is the set of valuations $\nu: Var \to \mathbb{R}$    \item $\Sigma$ is the set of states $(l, \nu) \in Loc \times V$\end{itemize}[/latex]
Semantics of hybrid automata  	[latex]Operational semantics:\\ \\ $Rule_{discrete}$:\begin{equation*}\frac{(l, a, \mu, l') \in Edge \ \ (\nu, \nu') \in \mu \ \ \nu' \in Inv(l')}{(l, \nu) \stackrel{a}{\to} (l', \nu')}\end{equation*}$Rule_{time}$:\begin{equation*}\frac{f \in Act(l)\ \ f(0) = \nu\ \ f(t) = \nu' \ \ t \geq 0\ \ \forall o \leqt' \leq t. f(t') \in Inv(l)}{(l, \nu) \stackrel{t}{\to} (l, \nu')}\end{equation*}\begin{enumerate}    \item step: $\to \in \{\stackrel{a}{\to}\} \cup \{\stackrel{t}{\to}\}$    \item run: $\sigma_0 \to \sigma_1 \to \sigma_2 \dots$ with $\sigma_0 =(l_0, \nu_0) \in Init$ and $\nu_0 \in Inv(l_0$    \item a state is called reachable iff there is a run leading to it    \item activities are usually represented by ordinary differential equations\end{enumerate}[/latex]
Parallel composition of Hybrid automata  	TODO: DO FROM SLIDE 44 SLIDESET2
